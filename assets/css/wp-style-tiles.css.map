{"version":3,"sources":["../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_box-sizing.scss","wp-style-tiles.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_outer-container.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/settings/_grid.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/mixins/_clearfix.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_size.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_px-to-rem.scss"],"names":[],"mappings":"AAGE,IAAI,CAAC;EACH,UAAU,EAAE,UAAW,GACxB;;AAED,CAAC,EAAD,AAAC,CAAA,OAES,EAFV,AAAC,CAAA,QAGU,CAAC;EACR,UAAU,EAAE,OAAQ,GACrB;;ACCL,AAEC,kBAFiB,CAEjB,cAAc,CAAC;ECad,SAAS,ECJC,MAAM;EDKhB,WACM,EAAE,IAAK;EADb,YAEO,EAAE,IAAK,GDdd;;AAJF,AAEe,kBAFG,CAEjB,cAAc,OGIL,CAAC;EACP,KAAK,EAAE,IAAK;EACZ,OAAO,EAAE,EAAG;EACZ,OAAO,EAAE,KAAM,GAChB;;AHDH,YAAY,CAAC;EACZ,OAAO,EAAE,IAAK;EACd,SAAS,EAAE,QAAS;EACpB,eAAe,EAAE,YAAa,GAc9B;;AAjBD,AAOE,YAPU,MAKJ,CAEN,gBAAgB,CAAC;EAChB,aAAa,EAAE,IAAK,GACpB;;AATH,AAYC,YAZW,CAYX,gBAAgB,CAAC;EIMd,MAAM,EC3BC,SAAM;EDiCb,KAAK,ECjCE,SAAM;ELwBf,aAAa,EKxBJ,QAAM,GLyBf","file":"wp-style-tiles.css","sourcesContent":["@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n","//--------------------------------------------------------------\n//   WP STYLE TILES\n//--------------------------------------------------------------\n@import \"bourbon\";\n@import \"neat\";\n\n$phone-landscape: rem(480);\n$tablet-portrait: rem(768);\n$tablet-landscape: rem(1024);\n$desktop-small: rem(1280);\n$desktop-medium: rem(1440);\n$desktop-large: rem(1920);\n\n.single-style-tile {\n\n\t.entry-content {\n\t\t@include outer-container;\n\t}\n}\n//--------------------------------------------------------------\n//   COLORS\n//--------------------------------------------------------------\n.wpst-colors {\n\tdisplay: flex;\n\tflex-flow: row wrap;\n\tjustify-content: space-around;\n\t\n\t&.round {\n\t\t\n\t\t.wpst-color-chip {\n\t\t\tborder-radius: 100%;\n\t\t}\n\t}\n\n\t.wpst-color-chip {\n\t\t@include size(rem(125));\n\n\t\tmargin-bottom: rem(30);\n\t}\n}\n","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centering it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number [unit]} $local-max-width [$max-width]\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Sets the relative width of a single grid column. The unit used should be the same one used to define `$gutter`. Set with a `!global` flag.\n///\n/// @type Number (Unit)\n\n$column: 4.2358em !default;\n\n/// Sets the relative width of a single grid gutter. The unit used should be the same one used to define `$column`. Set with the `!global` flag.\n///\n/// @type Number (Unit)\n\n$gutter: 1.618em !default;\n\n/// Sets the total number of columns in the grid. Its value can be overridden inside a media query using the `media()` mixin. Set with the `!global` flag.\n///\n/// @type Number (Unitless)\n\n$grid-columns: 12 !default;\n\n/// Sets the max-width property of the element that includes `outer-container()`. Set with the `!global` flag.\n///\n/// @type Number (Unit)\n///\n$max-width: 1200px !default;\n\n/// When set to true, it sets the box-sizing property of all elements to `border-box`. Set with a `!global` flag.\n///\n/// @type Bool\n///\n/// @example css - CSS Output\n///   html {\n///     box-sizing: border-box; }\n///\n///   *, *::after, *::before {\n///     box-sizing: inherit;\n///   }\n\n$border-box-sizing: true !default;\n\n/// Sets the default [media feature](http://www.w3.org/TR/css3-mediaqueries/#media) that `media()` and `new-breakpoint()` revert to when only a breakpoint value is passed. Set with a `!global` flag.\n///\n/// @type String\n\n$default-feature: min-width; // Default @media feature for the breakpoint() mixin\n\n///Sets the default layout direction of the grid. Can be `LTR` or `RTL`. Set with a `!global` flag.\n///\n///@type String\n\n$default-layout-direction: LTR !default;\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://goo.gl/yP5hiZ\n///\n/// @example scss\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: block;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Sets the `width` and `height` of the element.\n///\n/// @param {List} $size\n///   A list of at most 2 size values.\n///\n///   If there is only a single value in `$size` it is used for both width and height. All units are supported.\n///\n/// @example scss - Usage\n///   .first-element {\n///     @include size(2em);\n///   }\n///\n///   .second-element {\n///     @include size(auto 10em);\n///   }\n///\n/// @example css - CSS Output\n///   .first-element {\n///     width: 2em;\n///     height: 2em;\n///   }\n///\n///   .second-element {\n///     width: auto;\n///     height: 10em;\n///   }\n///\n/// @todo Refactor in 5.0.0 to use a comma-separated argument\n\n@mixin size($value) {\n  $width: nth($value, 1);\n  $height: $width;\n\n  @if length($value) > 1 {\n    $height: nth($value, 2);\n  }\n\n  @if is-size($height) {\n    height: $height;\n  } @else {\n    @warn \"`#{$height}` is not a valid length for the `$height` parameter in the `size` mixin.\";\n  }\n\n  @if is-size($width) {\n    width: $width;\n  } @else {\n    @warn \"`#{$width}` is not a valid length for the `$width` parameter in the `size` mixin.\";\n  }\n}\n","// Convert pixels to rems\n// eg. for a relational value of 12px write rem(12)\n// Assumes $em-base is the font-size of <html>\n\n@function rem($pxval) {\n  @if not unitless($pxval) {\n    $pxval: strip-units($pxval);\n  }\n\n  $base: $em-base;\n  @if not unitless($base) {\n    $base: strip-units($base);\n  }\n  @return ($pxval / $base) * 1rem;\n}\n"],"sourceRoot":"/source/"}